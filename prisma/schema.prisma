generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  createdAt    DateTime      @default(now())
  isAdmin      Boolean       @default(false)
  accounts     Account[]
  sessions     Session[]
  courses      UserCourse[]
  watchRecords WatchRecord[]
  watchTime    WatchTime[]
}

model Course {
  id           String        @id @default(cuid())
  code         String        @unique
  title        String
  users        UserCourse[]
  videos       Video[]
  watchRecords WatchRecord[]
  muxMappings  MuxMapping[]
}

model Video {
  id           String        @id @default(cuid())
  courseId     String
  title        String
  r2Path       String        @unique
  course       Course        @relation(fields: [courseId], references: [id])
  watchRecords WatchRecord[]
  watchTime    WatchTime[]
}

model UserCourse {
  id       String @id @default(cuid())
  userId   String
  courseId String
  course   Course @relation(fields: [courseId], references: [id])
  user     User   @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@map("VerificationToken")
}

model VideoKeystore {
  id        Int      @id @default(autoincrement())
  videoId   String   @unique
  keystore  Json
  updatedAt DateTime @updatedAt
}

model WatchRecord {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  watchedAt DateTime @default(now())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
}

model WatchTime {
  id           Int      @id @default(autoincrement())
  userId       String
  videoId      String
  totalSeconds Int      @default(0)
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video        Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
}

model VideoAesKey {
  id               String   @id @default(cuid())
  courseCode       String
  videoId          String
  kmsCiphertextB64 String // 16-byte key encrypted by KMS, base64
  createdAt        DateTime @default(now())

  @@unique([courseCode, videoId])
}

model MuxMapping {
  id         String   @id @default(cuid())
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId   String
  videoSlug  String
  playbackId String
  assetId    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([courseId, videoSlug])
  @@index([playbackId])
}
